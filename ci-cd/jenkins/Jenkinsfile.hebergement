#!/usr/bin/env groovy

// Pipeline pour la gestion de l'infrastructure
def call() {
    pipeline {
        agent any

        options {
            buildDiscarder(logRotator(numToKeepStr: '10'))
            disableConcurrentBuilds()
            timestamps()
        }

        environment {
            GITHUB_CREDENTIALS = credentials('github-hebergement')
            // Configuration des services
            TRAEFIK_ENABLED = true
            PROMETHEUS_ENABLED = true
            DOCKER_ENABLED = true
            GIT_ENABLED = true
            JENKINS_HOME = '/var/jenkins_home'
        }

        stages {
            stage('Initialize') {
                agent { label 'master' }
                steps {
                    script {
                        // Configuration Git
                        sh '''
                            git config --global core.longpaths true
                            git config --global http.sslVerify false
                            git config --global --add safe.directory "${WORKSPACE}"
                        '''

                        echo "Current workspace is ${WORKSPACE}"
                        echo "Jenkins home is ${JENKINS_HOME}"
                    }
                }
            }

            stage('Validate Configuration') {
                agent { label 'master' }
                steps {
                    script {
                        echo "Validating Jenkins configuration files..."
                        // Vérification de la syntaxe des fichiers yaml
                        sh '''
                            for file in $(find . -name "*.yaml" -o -name "*.yml"); do
                                echo "Validating $file"
                                yamllint "$file" || true
                            done
                        '''

                        // Vérification des fichiers Groovy
                        sh '''
                            for file in $(find . -name "*.groovy"); do
                                echo "Checking $file"
                                groovy -cp ${JENKINS_HOME}/war/WEB-INF/lib/jenkins-core-*.jar:. -e "evaluate(new File('$file'))" || true
                            done
                        '''
                    }
                }
            }

            stage('Check Infrastructure Services') {
                agent { label 'master' }
                steps {
                    script {
                        echo "Checking infrastructure services status..."

                        // Vérification de Traefik
                        if (env.TRAEFIK_ENABLED == 'true') {
                            sh '''
                                echo "Checking Traefik..."
                                docker ps | grep traefik || echo "Traefik not running"
                                curl -s http://localhost:8080/api/rawdata || echo "Traefik API not accessible"
                            '''
                        }

                        // Vérification de Prometheus
                        if (env.PROMETHEUS_ENABLED == 'true') {
                            sh '''
                                echo "Checking Prometheus..."
                                docker ps | grep prometheus || echo "Prometheus not running"
                                curl -s http://localhost:9090/-/healthy || echo "Prometheus not healthy"
                            '''
                        }

                        // Vérification de Docker
                        if (env.DOCKER_ENABLED == 'true') {
                            sh '''
                                echo "Checking Docker..."
                                docker info || echo "Docker not accessible"
                                docker network ls | grep traefik-public || echo "Traefik network not found"
                            '''
                        }

                        // Vérification de Git
                        if (env.GIT_ENABLED == 'true') {
                            sh '''
                                echo "Checking Git configuration..."
                                git config --list | grep safe.directory || echo "No safe.directory configured"
                            '''
                        }
                    }
                }
            }

            stage('Apply Configuration') {
                agent { label 'master' }
                steps {
                    script {
                        echo "Applying configuration changes..."
                        // Recharger la configuration Jenkins si nécessaire
                        def changes = sh(script: 'git diff --name-only HEAD HEAD~1 | grep -E ".*\\.(yaml|yml|groovy)$" || true', returnStdout: true).trim()
                        if (changes) {
                            echo "Configuration files changed, reloading Jenkins..."
                            jenkins.model.Jenkins.instance.reload()
                        }
                    }
                }
            }

            stage('Update Services') {
                agent { label 'master' }
                steps {
                    script {
                        echo "Updating services if needed..."
                        // Vérifier les changements dans les services
                        def serviceChanges = sh(script: 'git diff --name-only HEAD HEAD~1 | grep -E "docker-compose.*\\.ya?ml$" || true', returnStdout: true).trim()
                        if (serviceChanges) {
                            echo "Docker services configuration changed, updating..."
                            sh 'docker compose -f docker-compose.yml up -d --remove-orphans'
                        }
                    }
                }
            }
        }

        post {
            always {
                node('master') {
                    script {
                        // Nettoyage des conteneurs et images
                        sh '''
                            docker rm -f api_ihm_test || true
                            docker rm -f api_ihm || true
                            docker system prune -f || true
                        '''

                        // Nettoyage des fichiers de configuration
                        sh """
                            rm -rf ${WORKSPACE}/.docker || true
                            rm -rf ${WORKSPACE}/docker-config.json || true
                        """

                        // Notification par email
                        emailext(
                            subject: "Pipeline ${currentBuild.result}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                            body: """<p>Pipeline ${currentBuild.result}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                            <p>Consultez les détails du build: <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>""",
                            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                        )
                    }
                }
            }
            success {
                node('master') {
                    script {
                        echo 'Infrastructure configuration updated successfully!'
                    }
                }
            }
            failure {
                node('master') {
                    script {
                        echo 'Failed to update infrastructure configuration!'
                    }
                }
            }
        }
    }
}

// Appel du pipeline
call()