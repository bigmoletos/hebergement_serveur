# ==============================================================================
#             FICHIER DE CONFIGURATION JENKINS CASC (CONFIGURATION AS CODE)
# ==============================================================================
#
# RÔLE ET OBJECTIF :
#   Ce fichier centralise la configuration de l'instance Jenkins. Il utilise la
#   syntaxe YAML et le plugin "Configuration as Code" (CasC) pour permettre
#   une gestion versionnée, reproductible et automatisée de Jenkins.
#   Il couvre la configuration globale du système, la définition des jobs (via JobDSL),
#   la gestion des credentials, des outils (comme Git), et d'autres paramètres.
#
# STRUCTURE DU FICHIER :
#   - jenkins: Configuration globale (exécuteurs, mode, nœuds, sécurité de base).
#   - jobs: Définition des jobs et des pipelines. Utilise des scripts Groovy (JobDSL)
#           pour décrire dynamiquement les jobs. Cela inclut des pipelines applicatifs
#           (ex: pour 'airquality') et des "seed jobs" qui génèrent d'autres jobs.
#   - credentials: Gestion sécurisée des secrets (tokens, clés SSH, mots de passe)
#                utilisés par Jenkins et les jobs. Les valeurs sensibles sont injectées
#                via des variables d'environnement lors du démarrage de Jenkins.
#   - tool: Configuration des outils externes intégrés à Jenkins (ex: installations Git).
#   - unclassified: Configurations spécifiques à certains plugins qui ne sont pas
#                   encore pleinement intégrées dans le schéma CasC standard.
#   - security: Paramètres de sécurité, y compris l'approbation des scripts Groovy.
#
# GESTION DES SECRETS (VARIABLES D'ENVIRONNEMENT) :
#   Les informations sensibles (tokens, clés privées, mots de passe) ne sont JAMAIS
#   écrites en dur dans ce fichier. Elles sont référencées via la syntaxe `${NOM_VARIABLE}`.
#   Ces variables d'environnement doivent être fournies au conteneur Jenkins au démarrage
#   (par exemple, via un fichier .env et Docker Compose, ou des secrets Kubernetes).
#
# MAINTENANCE ET BONNES PRATIQUES :
#   - Versionnement: Ce fichier DOIT être versionné dans un dépôt Git.
#   - Modularité: Pour les configurations complexes, envisagez de scinder la configuration
#                en plusieurs fichiers YAML et de les inclure.
#   - JobDSL: Privilégiez JobDSL pour la définition des jobs afin de bénéficier de la
#             puissance de Groovy pour la logique de création et de maintenance des pipelines.
#   - Tests: Testez les modifications de ce fichier dans un environnement de pré-production
#            avant de les appliquer en production pour éviter les interruptions de service.
#   - Documentation: Maintenez cette documentation à jour et commentez les sections
#                  complexes ou les choix de conception importants.
#   - Idempotence: Assurez-vous que l'application de cette configuration (via CasC)
#                est idempotente, c'est-à-dire qu'elle peut être appliquée plusieurs fois
#                sans effets de bord indésirables.
#
# APPLICATION DE LA CONFIGURATION :
#   La configuration est généralement appliquée au démarrage de Jenkins ou via l'interface
#   utilisateur de Jenkins (section "Configuration as Code" dans "Manage Jenkins").
#
# ==============================================================================
# Auteur initial : [franck Desmedt]
# Date initiale : [avril 2025]
# Contributeurs : [Lister ici d'autres contributeurs ou équipes]
# Version actuelle : [Indiquer la version actuelle du fichier, ex: 1.1.0]
# ==============================================================================

# =====================================================
# Fichier de configuration CasC Jenkins (Configuration as Code)
# - Définition des jobs, dossiers, credentials et propriétés globales
# - Utilise JobDSL pour la génération dynamique des jobs
# - Centralise la configuration pour la maintenance CI/CD
# =====================================================
# Auteur : [franck Desmedt]
# Date : [avril 2025]
# =====================================================
jenkins:
  systemMessage: "Jenkins minimal pour test CasC - LOGGING DEBUG"
  numExecutors: 2
  mode: NORMAL
  scmCheckoutRetryCount: 3
  labelString: "master"
  # Configuration du nœud principal
  nodes:
    - permanent:
        name: "master"
        remoteFS: "/var/jenkins_home"
        numExecutors: 2
        labelString: "master"
        mode: NORMAL
        launcher:
          ssh:
            host: "localhost"
            port: 22
            credentialsId: "jenkins-ssh"
        retentionStrategy:
          always: {}
        nodeProperties:
          - envVars:
              env:
                - key: "JENKINS_HOME"
                  value: "/var/jenkins_home"
                - key: "JENKINS_SLAVE_AGENT_PORT"
                  value: "50000"
  # securityRealm:
  #   local:
  #     allowsSignup: false
  #     enableCaptcha: false
  # La section 'users' est gérée manuellement après le premier démarrage, il faut rentrer le mot de passe de l'utilisateur admin qui est dans le fichier .env

  # authorizationStrategy:
  #   globalMatrix:
  #     permissions:
  #       - "Overall/Administer:${JENKINS_ADMIN_ID:-admin}"
  #       - "Overall/Read:authenticated"

# --- Configuration des jobs --- #
jobs:
  - script: |
      // Création des dossiers
      folder('applications')
      folder('applications/airquality')
      folder('infrastructure')
      folder('infrastructure/hebergement')

      // Configuration Git globale
      // Objectif : Ce job a pour but de configurer globalement Git sur l'agent Jenkins (le master dans ce cas, car il n'y a pas d'agent spécifié pour ce job simple). Il exécute des commandes git config --global ... pour des paramètres comme core.longpaths, http.sslVerify, et safe.directory.
      // Déclenchement : Il est configuré pour s'exécuter périodiquement toutes les 30 minutes (cron('H/30 * * * *')).

      job('git-config') {
        description('Configuration Git globale pour Jenkins')
        steps {
          shell('''#!/bin/bash
            echo "=== Configuring Git settings ==="

            # Configuration Git de base
            git config --global core.longpaths true
            git config --global http.sslVerify false
            git config --global init.defaultBranch main

            # Configuration des répertoires sûrs
            git config --global --add safe.directory '/var/jenkins_home/workspace'
            git config --global --add safe.directory '/var/jenkins_home/workspace/applications/airquality'
            git config --global --add safe.directory '/var/jenkins_home/workspace/applications/airquality/build-and-deploy@script'

            # Ajout dynamique des sous-dossiers Jenkins comme safe.directory
            find /var/jenkins_home/workspace/applications/airquality/ -type d -name "build-and-deploy@script*" | while read dir; do
              git config --global --add safe.directory "$dir"
            done

            # Affichage de la configuration
            echo "=== Current Git configuration ==="
            git config --global --list
          ''')
        }

        // Exécution périodique toutes les 30 minutes
        triggers {
          cron('H/30 * * * *')
        }
      }

      // Pipeline principal
      pipelineJob('applications/airquality/build-and-deploy') {
        description('Pipeline CI/CD pour l\'application de qualité de l\'air')

        // Configuration des propriétés du job
        properties {
          disableConcurrentBuilds()
          pipelineTriggers {
            triggers {
              gitlab {
                triggerOnPush(true)
                triggerOnMergeRequest(true)
                triggerOnNoteRequest(false)
                noteRegex("Jenkins please retry")
                skipWorkInProgressMergeRequest(true)
                ciSkip(true)
                setBuildDescription(true)
                addNoteOnMergeRequest(true)
                addCiMessage(true)
                addVoteOnMergeRequest(true)
                acceptMergeRequestOnSuccess(false)
                branchFilterType("NameBasedFilter")
                includeBranchesSpec("main develop feature/* hotfix/*")
                secretToken(System.getenv('GITLAB_WEBHOOK_SECRET'))
              }
            }
          }
        }

        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('https://gitlab.com/iaproject-fr/airquality.git')
                  credentials('credentialGitlab')
                }
                branch('*/main')
                extensions {
                  cleanBeforeCheckout()
                  cloneOptions {
                    depth(1)
                    shallow(true)
                    timeout(10)
                    noTags(true)
                  }
                  wipeOutWorkspace()
                  submoduleOptions {
                    disable(true)
                    recursive(false)
                    tracking(false)
                  }
                  localBranch('main')
                }
              }
            }
            scriptPath('ci-cd/Jenkinsfile')
            lightweight(false)
          }
        }
      }

      // --- SEED JOB POUR LES PIPELINES D'INFRASTRUCTURE ET DE PREPARATION D'IMAGE ---
      // Objectif: Ce "seed job" est un pipeline spécial dont le rôle est de lire des scripts
      //           JobDSL (des fichiers .groovy) qui décrivent d'autres jobs Jenkins.
      //           Il crée ou met à jour ces jobs dynamiquement.
      //           Ceci permet de gérer la configuration de multiples jobs de manière centralisée
      //           et versionnée dans des fichiers DSL plutôt que manuellement dans l'interface Jenkins.
      //
      // Jobs générés par ce seed job:
      //   1. 'infrastructure/hebergement/config-update': Pipeline pour gérer la configuration de l'infrastructure d'hébergement.
      //      (Défini dans hebergement_serveur/ci-cd/jenkins/casc/jobs/hebergement-pipeline.groovy)
      //   2. 'preparation_image_docker_ansible': Pipeline pour construire et pousser l'image Docker personnalisée ansible-docker.
      //      (Défini dans hebergement_serveur/ci-cd/jenkins/casc/jobs/preparation_image_docker_ansible.groovy)
      //
      // Déclenchement: Idéalement par webhook GitHub sur le dépôt contenant les fichiers DSL.
      //              Un polling SCM est une alternative si le webhook n'est pas configuré.
      //
      // Fonctionnement:
      //   1. Clone le dépôt spécifié (hebergement_serveur).
      //   2. Exécute un script pipeline (ici, défini inline).
      //   3. L'étape 'jobDsl' de ce script pipeline lit les fichiers .groovy cibles.
      //   4. Les jobs décrits dans ces fichiers .groovy sont créés ou mis à jour dans Jenkins.
      pipelineJob('seed-job-infrastructure-ansible-docker') {
        description('Seed job pour créer/mettre à jour les jobs d\'infrastructure (hébergement, image Ansible) à partir des scripts JobDSL. (Test CPS direct actif)')

        // --- CONFIGURATION DE TEST (cps direct) ACTIVE ---
        definition {
          cps {
            script("""
              node('master') { // Remplacez 'master' par le label de votre agent Jenkins principal si différent
                stage('Checkout SCM for DSL Scripts') {
                  echo 'Nettoyage du workspace précédent...'
                  cleanWs()

                  echo 'Clonage du dépôt hebergement_serveur pour les scripts JobDSL...'
                  git branch: 'main',
                      credentialsId: 'github-hebergement',
                      url: 'https://github.com/bigmoletos/hebergement_serveur.git'
                }

                stage('Generate Infrastructure Jobs from DSL') {
                  echo 'Exécution de JobDSL sur les fichiers cibles...'
                  jobDsl(
                    targets: 'ci-cd/jenkins/casc/jobs/*.groovy'
                  )
                  echo 'Génération des jobs JobDSL terminée.'
                }
              }
            """.stripIndent())
            // sandbox(true)
          }
        }

        // Les déclencheurs restent les mêmes
        triggers {
          // OPTION 1: Webhook GitHub (préféré pour une réaction immédiate aux changements)
          // Nécessite que Jenkins soit accessible depuis GitHub et que le plugin GitHub soit configuré.
          // Un webhook doit être configuré sur le dépôt GitHub 'hebergement_serveur' pointant vers Jenkins.
          githubPush()

          // OPTION 2: SCM Polling (vérifie périodiquement les changements dans le dépôt)
          // Moins réactif que le webhook mais plus simple si Jenkins n'est pas exposé publiquement.
          // cron('H/15 * * * *') // Exemple: vérifie toutes les 15 minutes. Ajuster la fréquence.

          // OPTION 3: Déclencheur Cron simple (exécute le seed job à intervalle régulier, indépendamment des changements SCM)
          // Peut être utile pour s'assurer que la configuration est ré-appliquée régulièrement.
          // cron('@daily') // Exemple: exécute une fois par jour.
        }
      }

# Script Groovy pour définir les niveaux de log
security:
  scriptApproval:
    approvedSignatures:
      - "method java.util.logging.Logger setLevel java.util.logging.Level"

# --- Sections pour credentials --- #
credentials:
  system:
    domainCredentials:
      - credentials:
          # --- Credentials SSH pour Jenkins --- #
          - basicSSHUserPrivateKey:
              scope: SYSTEM
              id: "jenkins-ssh"
              username: "jenkins"
              privateKeySource:
                fileOnMaster:
                  privateKeyFile: /var/jenkins_secrets/airquality_server_key
              description: "SSH credentials for Jenkins master node"
          # --- Credentials Standard Jenkins --- #
          # Token GitLab pour la connexion Jenkins et le scan des dépôts (en tant que GitLab API Token)
          # Décommenté car utilisé par le script Groovy gitlab-config.groovy
          - gitLabApiTokenImpl:
              scope: SYSTEM
              id: "gitlab-token"
              apiToken: ${GITLAB_API_TOKEN}
              description: "GitLab API Token (Standard Connection - via GitLab Token Type)"
          # Identifiants Docker Hub pour pousser/tirer les images dans Jenkins
          - usernamePassword:
              scope: SYSTEM
              id: "docker-hub"
              username: ${DOCKER_USERNAME}
              password: ${DOCKER_PASSWORD}
              description: "Docker Hub Credentials (Standard)"

          # --- Credentials Spécifiques au Pipeline AirQuality --- #
          # Token GitLab utilisé par le Jenkinsfile AirQuality (transformé en Username/Password)
          - usernamePassword:
              scope: GLOBAL
              id: "credentialGitlab"
              username: "oauth2"
              password: ${GITLAB_API_TOKEN} # Note: GITLAB_API_TOKEN est utilisé comme un mot de passe ici
              description: "GitLab Token (Username/Password pour checkout HTTPS - pour AirQuality Jenkinsfile)"
          # Identifiants Docker Hub utilisés par le Jenkinsfile AirQuality
          - usernamePassword:
              scope: GLOBAL
              id: "dockerhub_airquality"
              username: ${DOCKER_USERNAME}
              password: ${DOCKER_PASSWORD}
              description: "Docker Hub Credentials (pour AirQuality Jenkinsfile)"
          # Identifiants BDD pour Ansible
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user1"
              username: ${BDD_USER1_USERNAME}
              password: ${BDD_USER1_PASSWORD}
              description: "BDD User 1 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user2"
              username: ${BDD_USER2_USERNAME}
              password: ${BDD_USER2_PASSWORD}
              description: "BDD User 2 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user3"
              username: ${BDD_USER3_USERNAME}
              password: ${BDD_USER3_PASSWORD}
              description: "BDD User 3 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user4"
              username: ${BDD_USER4_USERNAME}
              password: ${BDD_USER4_PASSWORD}
              description: "BDD User 4 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user_admin"
              username: ${BDD_USER_ADMIN_USERNAME}
              password: ${BDD_USER_ADMIN_PASSWORD}
              description: "BDD User Admin (pour AirQuality Ansible)"

          # Credentials GitHub pour l'hébergement
          - usernamePassword:
              scope: GLOBAL
              id: "github-hebergement"
              username: ${GITHUB_USERNAME}
              password: ${GITHUB_TOKEN}
              description: "GitHub Credentials pour le dépôt d'hébergement"

          # Credentials OVH pour le DNS
          - string:
              scope: GLOBAL
              id: "OVH_DNS_ZONE"
              secret: ${OVH_DNS_ZONE}
              description: "Zone DNS OVH pour le déploiement"
          - string:
              scope: GLOBAL
              id: "OVH_DNS_SUBDOMAIN"
              secret: ${OVH_DNS_SUBDOMAIN}
              description: "Sous-domaine OVH pour le déploiement"

          # Credential de type usernamePassword pour le token API Jenkins
          - usernamePassword:
              scope: GLOBAL
              id: "jenkins-api-token"
              username: "${JENKINS_ADMIN_USER}"
              password: "${JENKINS_API_TOKEN}"
              description: "Token API Jenkins pour déclenchement via GitLab CI"

# --- Section Tool au niveau racine --- #
tool:
  git:
    installations:
      - name: Default
        home: git

# Section unclassified commentée pour éviter des erreurs potentielles
unclassified:
  gitLabConnectionConfig:
    connections:
      - name: "GitLab"
        url: "https://gitlab.com"
        apiTokenId: "gitlab-token"
        clientBuilderId: "autodetect"
        connectionTimeout: 10000
        readTimeout: 10000
        ignoreCertificateErrors: false

  # Configuration des webhooks GitHub
  githubConfiguration:
    endpoints:
      - apiUri: "https://api.github.com"
        name: "GitHub"