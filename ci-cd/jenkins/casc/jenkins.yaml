jenkins:
  systemMessage: "Jenkins minimal pour test CasC - LOGGING DEBUG"
  # securityRealm:
  #   local:
  #     allowsSignup: false
  #     enableCaptcha: false
  # La section 'users' est gérée manuellement après le premier démarrage, il faut rentrer le mot de passe de l'utilisateur admin qui est dans le fichier .env

  # authorizationStrategy:
  #   globalMatrix:
  #     permissions:
  #       - "Overall/Administer:${JENKINS_ADMIN_ID:-admin}"
  #       - "Overall/Read:authenticated"

# --- Configuration des jobs --- #
jobs:
  - script: |
      // Création des dossiers
      folder('applications')
      folder('applications/airquality')

      // Configuration Git globale
      job('git-config') {
        description('Configuration Git globale pour Jenkins')
        steps {
          shell('''#!/bin/bash
            echo "=== Configuring Git settings ==="

            # Configuration Git de base
            git config --global core.longpaths true
            git config --global http.sslVerify false
            git config --global init.defaultBranch main

            # Configuration des répertoires sûrs
            git config --global --add safe.directory '/var/jenkins_home/workspace'
            git config --global --add safe.directory '/var/jenkins_home/workspace/applications/airquality'
            git config --global --add safe.directory '/var/jenkins_home/workspace/applications/airquality/build-and-deploy@script'

            # Ajout dynamique des sous-dossiers Jenkins comme safe.directory
            find /var/jenkins_home/workspace/applications/airquality/ -type d -name "build-and-deploy@script*" | while read dir; do
              git config --global --add safe.directory "$dir"
            done

            # Affichage de la configuration
            echo "=== Current Git configuration ==="
            git config --global --list
          ''')
        }

        // Exécution périodique toutes les 30 minutes
        triggers {
          cron('H/30 * * * *')
        }
      }

      // Pipeline principal
      pipelineJob('applications/airquality/build-and-deploy') {
        description('Pipeline CI/CD pour l\'application de qualité de l\'air')

        // Configuration des propriétés du job
        properties {
          disableConcurrentBuilds()
          pipelineTriggers {
            triggers {
              gitlab {
                triggerOnPush(true)
                triggerOnMergeRequest(true)
                triggerOnNoteRequest(false)
                noteRegex("Jenkins please retry")
                skipWorkInProgressMergeRequest(true)
                ciSkip(true)
                setBuildDescription(true)
                addNoteOnMergeRequest(true)
                addCiMessage(true)
                addVoteOnMergeRequest(true)
                acceptMergeRequestOnSuccess(false)
                branchFilterType("NameBasedFilter")
                includeBranchesSpec("main develop feature/* hotfix/*")
                secretToken(System.getenv('GITLAB_WEBHOOK_SECRET'))
              }
            }
          }
        }

        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('https://gitlab.com/iaproject-fr/airquality.git')
                  credentials('credentialGitlab')
                }
                branch('*/main')
                extensions {
                  cleanBeforeCheckout()
                  cloneOptions {
                    depth(1)
                    shallow(true)
                    timeout(10)
                    noTags(true)
                  }
                  wipeOutWorkspace()
                  submoduleOptions {
                    disable(true)
                    recursive(false)
                    tracking(false)
                  }
                  localBranch('main')
                }
              }
            }
            scriptPath('ci-cd/Jenkinsfile')
            lightweight(false)
          }
        }
      }

# Script Groovy pour définir les niveaux de log
security:
  scriptApproval:
    approvedSignatures:
      - "method java.util.logging.Logger setLevel java.util.logging.Level"

# --- Sections pour credentials --- #
credentials:
  system:
    domainCredentials:
      - credentials:
          # --- Credentials Standard Jenkins --- #
          # Token GitLab pour la connexion Jenkins et le scan des dépôts (en tant que GitLab API Token)
          # Décommenté car utilisé par le script Groovy gitlab-config.groovy
          - gitLabApiTokenImpl:
              scope: SYSTEM
              id: "gitlab-token"
              apiToken: ${GITLAB_API_TOKEN}
              description: "GitLab API Token (Standard Connection - via GitLab Token Type)"
          # Identifiants Docker Hub pour pousser/tirer les images dans Jenkins
          - usernamePassword:
              scope: SYSTEM
              id: "docker-hub"
              username: ${DOCKER_USERNAME}
              password: ${DOCKER_PASSWORD}
              description: "Docker Hub Credentials (Standard)"

          # --- Credentials Spécifiques au Pipeline AirQuality --- #
          # Token GitLab utilisé par le Jenkinsfile AirQuality (transformé en Username/Password)
          - usernamePassword:
              scope: GLOBAL
              id: "credentialGitlab"
              username: "oauth2"
              password: ${GITLAB_API_TOKEN} # Note: GITLAB_API_TOKEN est utilisé comme un mot de passe ici
              description: "GitLab Token (Username/Password pour checkout HTTPS - pour AirQuality Jenkinsfile)"
          # Identifiants Docker Hub utilisés par le Jenkinsfile AirQuality
          - usernamePassword:
              scope: GLOBAL # Ou SYSTEM
              id: "dockerhub_airquality" # Nom spécifique requis par le Jenkinsfile
              username: ${DOCKER_USERNAME} # Assurez-vous que c'est le bon username pour cet identifiant
              password: ${DOCKER_PASSWORD} # Correction: Utilisation de la variable d'environnement
              description: "Docker Hub Credentials (pour AirQuality Jenkinsfile)"
          # Identifiants BDD pour Ansible
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user1"
              username: ${BDD_USER1_USERNAME}
              password: ${BDD_USER1_PASSWORD}
              description: "BDD User 1 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user2"
              username: ${BDD_USER2_USERNAME}
              password: ${BDD_USER2_PASSWORD}
              description: "BDD User 2 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user3"
              username: ${BDD_USER3_USERNAME}
              password: ${BDD_USER3_PASSWORD}
              description: "BDD User 3 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user4"
              username: ${BDD_USER4_USERNAME}
              password: ${BDD_USER4_PASSWORD}
              description: "BDD User 4 (pour AirQuality Ansible)"
          - usernamePassword:
              scope: GLOBAL
              id: "bdd_user_admin"
              username: ${BDD_USER_ADMIN_USERNAME}
              password: ${BDD_USER_ADMIN_PASSWORD}
              description: "BDD User Admin (pour AirQuality Ansible)"

          # --- Credentials GitHub pour l'hébergement --- #
          - usernamePassword:
              scope: GLOBAL
              id: "github-hebergement"
              username: ${GITHUB_USER}
              password: ${GITHUB_PASSWORD}
              description: "GitHub Credentials pour le dépôt d'hébergement"

# --- Section Tool au niveau racine --- #
tool:
  git:
    installations:
      - name: Default
        home: git

# Section unclassified commentée pour éviter des erreurs potentielles
unclassified:
  gitLabConnectionConfig:
    connections:
      - name: "GitLab"
        url: "https://gitlab.com"
        apiTokenId: "gitlab-token"
        clientBuilderId: "autodetect"
        connectionTimeout: 10000
        readTimeout: 10000
        ignoreCertificateErrors: false

  # Configuration des webhooks GitHub
  githubConfiguration:
    endpoints:
      - apiUri: "https://api.github.com"
        name: "GitHub"