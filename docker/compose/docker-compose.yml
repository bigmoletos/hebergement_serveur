version: '3.8'

services:
  # Reverse Proxy Traefik
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./../reverse-proxy/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./../reverse-proxy/dynamic:/etc/traefik/dynamic:ro
      - ./../reverse-proxy/certificates:/opt/traefik/certificates
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.airquality.iaproject.fr`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=secure-headers"

  # Jenkins CI/CD
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./../ci-cd/jenkins/jenkins.yaml:/usr/share/jenkins/ref/jenkins.yaml
    environment:
      - JENKINS_ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD}
      - DOCKER_REGISTRY_USER=${DOCKER_REGISTRY_USER}
      - DOCKER_REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD}
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.airquality.iaproject.fr`)"
      - "traefik.http.routers.jenkins.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jenkins.middlewares=secure-headers"

  # Service AirQuality
  airquality:
    build:
      context: ./../services/airquality
      dockerfile: Dockerfile
    container_name: airquality
    restart: always
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airquality.rule=Host(`airquality.iaproject.fr`)"
      - "traefik.http.routers.airquality.tls.certresolver=letsencrypt"
      - "traefik.http.routers.airquality.middlewares=secure-headers"

  # Service Extraction CV
  extraction_cv:
    build:
      context: ./../services/extraction_cv
      dockerfile: Dockerfile
    container_name: extraction_cv
    restart: always
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.extraction-cv.rule=Host(`cv.airquality.iaproject.fr`)"
      - "traefik.http.routers.extraction-cv.tls.certresolver=letsencrypt"
      - "traefik.http.routers.extraction-cv.middlewares=secure-headers"

  # Service Pr√©vision Vent
  prevision_vent:
    build:
      context: ./../services/prevision_vent
      dockerfile: Dockerfile
    container_name: prevision_vent
    restart: always
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prevision-vent.rule=Host(`vent.airquality.iaproject.fr`)"
      - "traefik.http.routers.prevision-vent.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prevision-vent.middlewares=secure-headers"

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./../infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`monitoring.airquality.iaproject.fr`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=secure-headers"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./../infrastructure/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./../infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.airquality.iaproject.fr`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.middlewares=secure-headers"

  # Logging
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    networks:
      - traefik-public
    volumes:
      - loki_data:/loki

networks:
  traefik-public:
    name: traefik-public

volumes:
  jenkins_data:
  grafana_data:
  loki_data: